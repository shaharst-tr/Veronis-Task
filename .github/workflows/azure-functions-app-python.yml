# This workflow deploys an Azure Function App using Terraform and Python
# It includes steps for initializing Terraform, validating, planning, and applying the configuration
# and then deploying the function app with the specified publish profile
#

name: Terraform and Azure Function Deployment

on:
  push:
    branches:
      - main # or your default branch name
      - feature/assignment # branch name from your previous log
  workflow_dispatch: # Allows manual triggering

jobs:
  terraform:
    name: "Terraform Infrastructure Deployment"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Create terraform.tfvars
        run: |
          cd terraform
          cat > terraform.tfvars <<EOF
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
          client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
          client_secret   = "${{ secrets.AZURE_CLIENT_SECRET }}"
          EOF

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Export Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          echo "function_app_name=$(terraform output -raw function_app_name || echo 'restaurant-api-func')" >> $GITHUB_ENV
          echo "resource_group=$(terraform output -raw resource_group_name || echo 'your-resource-group')" >> $GITHUB_ENV
        continue-on-error: true

  deploy-function:
    name: "Deploy Azure Function App"
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install azure-functions-core-tools@4 --ignore-installed

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.function_app_name || 'restaurant-api-func' }}
          package: "."
          respect-funcignore: true
          scm-do-build-during-deployment: true

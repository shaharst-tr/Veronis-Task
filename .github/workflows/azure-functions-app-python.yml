name: Terraform and Azure Function Deployment

on:
  push:
    branches:
      - main
      - feature/assignment
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform Infrastructure Deployment"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Inspect Terraform files
        run: |
          cd terraform
          echo "Listing all .tf files:"
          find . -name "*.tf" | sort

          echo -e "\nListing all variables defined:"
          grep -r "variable" --include="*.tf" . || echo "No variables found"

          echo -e "\nChecking for required variables:"
          grep -r "required" --include="*.tf" . || echo "No required variables found"

      - name: Create auto.tfvars
        run: |
          cd terraform
          # Create a comprehensive tfvars file with all possible variables
          cat > auto.tfvars <<EOF
          # Authentication variables
          subscription_id         = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          tenant_id               = "${{ secrets.AZURE_TENANT_ID }}"
          client_id               = "${{ secrets.AZURE_CLIENT_ID }}"
          client_secret           = "${{ secrets.AZURE_CLIENT_SECRET }}"

          # Common Azure variables
          location                = "eastus"
          resource_group_name     = "restaurant-api-rg"
          function_app_name       = "restaurant-api-func"

          # Additional variables - add any other variables your Terraform might need
          environment             = "dev"
          EOF

          echo "Created auto.tfvars with the following content:"
          cat auto.tfvars | grep -v "client_secret"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          # Add -input=false to prevent prompts
          # Add -auto-approve to automatically approve
          terraform plan -input=false -out=tfplan

      - name: Terraform Show Plan
        run: |
          cd terraform
          terraform show tfplan || echo "Failed to show plan"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -input=false -auto-approve tfplan

      - name: Export Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          terraform output -json || echo "No outputs found"
          echo "function_app_name=$(terraform output -raw function_app_name 2>/dev/null || echo 'restaurant-api-func')" >> $GITHUB_ENV
          echo "resource_group=$(terraform output -raw resource_group_name 2>/dev/null || echo 'restaurant-api-rg')" >> $GITHUB_ENV

  deploy-function:
    name: "Deploy Azure Function App"
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install azure-functions-core-tools@4 --ignore-installed

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.function_app_name }}
          package: "."
          respect-funcignore: true
          scm-do-build-during-deployment: true

name: Terraform and Azure Function Deployment

on:
  push:
    branches:
      - main
      - feature/assignment
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform Infrastructure Deployment"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Apply
        run: |
          cd terraform
          # Pass all variables directly on command line
          terraform apply -input=false -auto-approve \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var="location=westeurope" \
            -var="resource_group_name=restaurant-api-rg" \
            -var="function_app_name=restaurant-api-func"

      - name: Export Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          # Set default values to be used if output fails
          echo "function_app_name=restaurant-api-func" >> $GITHUB_ENV
          echo "resource_group=restaurant-api-rg" >> $GITHUB_ENV

          # Try to get values from terraform output, but don't fail if not found
          terraform output -json > outputs.json || true

          # Only update the environment variables if we successfully got outputs
          if [ -s outputs.json ]; then
            function_app=$(terraform output -raw function_app_name 2>/dev/null) || true
            resource_group=$(terraform output -raw resource_group_name 2>/dev/null) || true
            
            if [ ! -z "$function_app" ]; then
              echo "function_app_name=$function_app" >> $GITHUB_ENV
            fi
            
            if [ ! -z "$resource_group" ]; then
              echo "resource_group=$resource_group" >> $GITHUB_ENV
            fi
          fi

  deploy-function:
    name: "Deploy Azure Function App"
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install azure-functions-core-tools@4 --ignore-installed

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.function_app_name }}
          package: "."
          respect-funcignore: true
          scm-do-build-during-deployment: true

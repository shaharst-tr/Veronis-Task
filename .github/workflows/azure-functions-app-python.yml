name: Terraform and Azure Function Deployment

on:
  push:
    branches:
      - main
      - feature/assignment
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform Infrastructure Deployment"
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Export Function App Name
        id: export-function-name
        run: |
          cd terraform

          # First dump all outputs to JSON
          terraform output -json > tf_output.json

          # List all available output keys
          echo "Available output keys:"
          jq 'keys[]' tf_output.json

          # Try to extract function app name (adapt the key if needed)
          if jq -e '.function_app_name' tf_output.json > /dev/null; then
            # Output exists, extract the value
            APP_NAME=$(jq -r '.function_app_name.value' tf_output.json)
            echo "Found function app name: $APP_NAME"
            
            # Set as environment variable and output
            echo "FUNCTION_APP_NAME=$APP_NAME" >> $GITHUB_ENV
            echo "function_app_name=$APP_NAME" >> $GITHUB_OUTPUT
          else
            echo "Error: function_app_name not found in outputs"
            echo "Available outputs:"
            jq '.' tf_output.json
            exit 1
          fi
      # - name: Terraform Apply
      #   run: |
      #     cd terraform

      #     terraform apply -input=false -auto-approve

      # - name: Export Terraform Output for Function App Name
      #   id: export-tf-output
      #   run: |
      #     function_app_name=$(terraform -chdir=./terraform output -raw function_app_name)
      #     # Use the multiline syntax for GitHub outputs
      #     echo "function_app_name<<EOF" >> $GITHUB_OUTPUT
      #     echo "$function_app_name" >> $GITHUB_OUTPUT
      #     echo "EOF" >> $GITHUB_OUTPUT

    outputs:
      function_app_name: ${{ steps.export-tf-output.outputs.function_app_name }}

  deploy-function:
    name: "Deploy Azure Function App"
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          cd python-app
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.terraform.outputs.function_app_name }}
          package: "./python-app"
          respect-funcignore: true
          scm-do-build-during-deployment: true
